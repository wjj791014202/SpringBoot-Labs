<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.iocoder.springboot.lab36.prometheusdemo.repository.PositionMapper">
  <resultMap id="BaseResultMap" type="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDO">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="symbol" jdbcType="CHAR" property="symbol" />
    <result column="user_id" jdbcType="CHAR" property="userId" />
    <result column="risk_limit" jdbcType="INTEGER" property="riskLimit" />
    <result column="auto_deposit" jdbcType="BIT" property="autoDeposit" />
    <result column="margin_type" jdbcType="INTEGER" property="marginType" />
    <result column="is_open" jdbcType="BIT" property="isOpen" />
    <result column="avg_entry_price" jdbcType="DECIMAL" property="avgEntryPrice" />
    <result column="current_qty" jdbcType="BIGINT" property="currentQty" />
    <result column="current_cost" jdbcType="DECIMAL" property="currentCost" />
    <result column="current_comm" jdbcType="DECIMAL" property="currentComm" />
    <result column="unrealised_cost" jdbcType="DECIMAL" property="unrealisedCost" />
    <result column="pos_cost" jdbcType="DECIMAL" property="posCost" />
    <result column="pos_cross_margin" jdbcType="DECIMAL" property="posCrossMargin" />
    <result column="pos_init" jdbcType="DECIMAL" property="posInit" />
    <result column="pos_comm_common" jdbcType="DECIMAL" property="posCommCommon" />
    <result column="pos_comm_funding" jdbcType="DECIMAL" property="posCommFunding" />
    <result column="pos_loss" jdbcType="DECIMAL" property="posLoss" />
    <result column="pos_profit" jdbcType="DECIMAL" property="posProfit" />
    <result column="pos_maint" jdbcType="DECIMAL" property="posMaint" />
    <result column="liquidation_price" jdbcType="DECIMAL" property="liquidationPrice" />
    <result column="bankrupt_price" jdbcType="DECIMAL" property="bankruptPrice" />
    <result column="opening_timestamp" jdbcType="BIGINT" property="openingTimestamp" />
    <result column="snapshot_id" jdbcType="BIGINT" property="snapshotId" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, symbol, user_id, risk_limit, auto_deposit, margin_type, is_open, avg_entry_price,
    current_qty, current_cost, current_comm, unrealised_cost, pos_cost, pos_cross_margin, 
    pos_init, pos_comm_common, pos_comm_funding, pos_loss, pos_profit, pos_maint, liquidation_price, 
    bankrupt_price, opening_timestamp, snapshot_id, created_at, updated_at
  </sql>
  <insert id="insertSelective" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDO">
    insert into position
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="symbol != null">
        symbol,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="riskLimit != null">
        risk_limit,
      </if>
      <if test="autoDeposit != null">
        auto_deposit,
      </if>
      <if test="marginType != null">
        margin_type,
      </if>
      <if test="isOpen != null">
        is_open,
      </if>
      <if test="avgEntryPrice != null">
        avg_entry_price,
      </if>
      <if test="currentQty != null">
        current_qty,
      </if>
      <if test="currentCost != null">
        current_cost,
      </if>
      <if test="currentComm != null">
        current_comm,
      </if>
      <if test="unrealisedCost != null">
        unrealised_cost,
      </if>
      <if test="posCost != null">
        pos_cost,
      </if>
      <if test="posCrossMargin != null">
        pos_cross_margin,
      </if>
      <if test="posInit != null">
        pos_init,
      </if>
      <if test="posCommCommon != null">
        pos_comm_common,
      </if>
      <if test="posCommFunding != null">
        pos_comm_funding,
      </if>
      <if test="posLoss != null">
        pos_loss,
      </if>
      <if test="posProfit != null">
        pos_profit,
      </if>
      <if test="posMaint != null">
        pos_maint,
      </if>
      <if test="liquidationPrice != null">
        liquidation_price,
      </if>
      <if test="bankruptPrice != null">
        bankrupt_price,
      </if>
      <if test="openingTimestamp != null">
        opening_timestamp,
      </if>
      <if test="snapshotId != null">
        snapshot_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="symbol != null">
        #{symbol,jdbcType=CHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=CHAR},
      </if>
      <if test="riskLimit != null">
        #{riskLimit,jdbcType=INTEGER},
      </if>
      <if test="autoDeposit != null">
        #{autoDeposit,jdbcType=BIT},
      </if>
      <if test="marginType != null">
        #{marginType,jdbcType=INTEGER},
      </if>
      <if test="isOpen != null">
        #{isOpen,jdbcType=BIT},
      </if>
      <if test="avgEntryPrice != null">
        #{avgEntryPrice,jdbcType=DECIMAL},
      </if>
      <if test="currentQty != null">
        #{currentQty,jdbcType=BIGINT},
      </if>
      <if test="currentCost != null">
        #{currentCost,jdbcType=DECIMAL},
      </if>
      <if test="currentComm != null">
        #{currentComm,jdbcType=DECIMAL},
      </if>
      <if test="unrealisedCost != null">
        #{unrealisedCost,jdbcType=DECIMAL},
      </if>
      <if test="posCost != null">
        #{posCost,jdbcType=DECIMAL},
      </if>
      <if test="posCrossMargin != null">
        #{posCrossMargin,jdbcType=DECIMAL},
      </if>
      <if test="posInit != null">
        #{posInit,jdbcType=DECIMAL},
      </if>
      <if test="posCommCommon != null">
        #{posCommCommon,jdbcType=DECIMAL},
      </if>
      <if test="posCommFunding != null">
        #{posCommFunding,jdbcType=DECIMAL},
      </if>
      <if test="posLoss != null">
        #{posLoss,jdbcType=DECIMAL},
      </if>
      <if test="posProfit != null">
        #{posProfit,jdbcType=DECIMAL},
      </if>
      <if test="posMaint != null">
        #{posMaint,jdbcType=DECIMAL},
      </if>
      <if test="liquidationPrice != null">
        #{liquidationPrice,jdbcType=DECIMAL},
      </if>
      <if test="bankruptPrice != null">
        #{bankruptPrice,jdbcType=DECIMAL},
      </if>
      <if test="openingTimestamp != null">
        #{openingTimestamp,jdbcType=BIGINT},
      </if>
      <if test="snapshotId != null">
        #{snapshotId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDO">
    update position
    <set>
      <if test="symbol != null">
        symbol = #{symbol,jdbcType=CHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=CHAR},
      </if>
      <if test="riskLimit != null">
        risk_limit = #{riskLimit,jdbcType=INTEGER},
      </if>
      <if test="autoDeposit != null">
        auto_deposit = #{autoDeposit,jdbcType=BIT},
      </if>
      <if test="marginType != null">
        margin_type = #{marginType,jdbcType=INTEGER},
      </if>
      <if test="isOpen != null">
        is_open = #{isOpen,jdbcType=BIT},
      </if>
      <if test="avgEntryPrice != null">
        avg_entry_price = #{avgEntryPrice,jdbcType=DECIMAL},
      </if>
      <if test="currentQty != null">
        current_qty = #{currentQty,jdbcType=BIGINT},
      </if>
      <if test="currentCost != null">
        current_cost = #{currentCost,jdbcType=DECIMAL},
      </if>
      <if test="currentComm != null">
        current_comm = #{currentComm,jdbcType=DECIMAL},
      </if>
      <if test="unrealisedCost != null">
        unrealised_cost = #{unrealisedCost,jdbcType=DECIMAL},
      </if>
      <if test="posCost != null">
        pos_cost = #{posCost,jdbcType=DECIMAL},
      </if>
      <if test="posCrossMargin != null">
        pos_cross_margin = #{posCrossMargin,jdbcType=DECIMAL},
      </if>
      <if test="posInit != null">
        pos_init = #{posInit,jdbcType=DECIMAL},
      </if>
      <if test="posCommCommon != null">
        pos_comm_common = #{posCommCommon,jdbcType=DECIMAL},
      </if>
      <if test="posCommFunding != null">
        pos_comm_funding = #{posCommFunding,jdbcType=DECIMAL},
      </if>
      <if test="posLoss != null">
        pos_loss = #{posLoss,jdbcType=DECIMAL},
      </if>
      <if test="posProfit != null">
        pos_profit = #{posProfit,jdbcType=DECIMAL},
      </if>
      <if test="posMaint != null">
        pos_maint = #{posMaint,jdbcType=DECIMAL},
      </if>
      <if test="liquidationPrice != null">
        liquidation_price = #{liquidationPrice,jdbcType=DECIMAL},
      </if>
      <if test="bankruptPrice != null">
        bankrupt_price = #{bankruptPrice,jdbcType=DECIMAL},
      </if>
      <if test="openingTimestamp != null">
        opening_timestamp = #{openingTimestamp,jdbcType=BIGINT},
      </if>
      <if test="snapshotId != null">
        snapshot_id = #{snapshotId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByExampleSelective" parameterType="map">
    update position
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.symbol != null">
        symbol = #{record.symbol,jdbcType=CHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=CHAR},
      </if>
      <if test="record.riskLimit != null">
        risk_limit = #{record.riskLimit,jdbcType=INTEGER},
      </if>
      <if test="record.autoDeposit != null">
        auto_deposit = #{record.autoDeposit,jdbcType=BIT},
      </if>
      <if test="record.marginType != null">
        margin_type = #{record.marginType,jdbcType=INTEGER},
      </if>
      <if test="record.isOpen != null">
        is_open = #{record.isOpen,jdbcType=BIT},
      </if>
      <if test="record.avgEntryPrice != null">
        avg_entry_price = #{record.avgEntryPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.currentQty != null">
        current_qty = #{record.currentQty,jdbcType=BIGINT},
      </if>
      <if test="record.currentCost != null">
        current_cost = #{record.currentCost,jdbcType=DECIMAL},
      </if>
      <if test="record.currentComm != null">
        current_comm = #{record.currentComm,jdbcType=DECIMAL},
      </if>
      <if test="record.unrealisedCost != null">
        unrealised_cost = #{record.unrealisedCost,jdbcType=DECIMAL},
      </if>
      <if test="record.posCost != null">
        pos_cost = #{record.posCost,jdbcType=DECIMAL},
      </if>
      <if test="record.posCrossMargin != null">
        pos_cross_margin = #{record.posCrossMargin,jdbcType=DECIMAL},
      </if>
      <if test="record.posInit != null">
        pos_init = #{record.posInit,jdbcType=DECIMAL},
      </if>
      <if test="record.posCommCommon != null">
        pos_comm_common = #{record.posCommCommon,jdbcType=DECIMAL},
      </if>
      <if test="record.posCommFunding != null">
        pos_comm_funding = #{record.posCommFunding,jdbcType=DECIMAL},
      </if>
      <if test="record.posLoss != null">
        pos_loss = #{record.posLoss,jdbcType=DECIMAL},
      </if>
      <if test="record.posProfit != null">
        pos_profit = #{record.posProfit,jdbcType=DECIMAL},
      </if>
      <if test="record.posMaint != null">
        pos_maint = #{record.posMaint,jdbcType=DECIMAL},
      </if>
      <if test="record.liquidationPrice != null">
        liquidation_price = #{record.liquidationPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.bankruptPrice != null">
        bankrupt_price = #{record.bankruptPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.openingTimestamp != null">
        opening_timestamp = #{record.openingTimestamp,jdbcType=BIGINT},
      </if>
      <if test="record.snapshotId != null">
        snapshot_id = #{record.snapshotId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from position
    where id = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDOExample">
    delete from position
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from position
    where id = #{id,jdbcType=CHAR}
  </select>
  <select id="selectByExample" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from position
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from position
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
     limit 1
  </select>
  <select id="countByExample" parameterType="cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDOExample" resultType="java.lang.Long">
    select count(*) from position
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <select id="selectPositionsBy" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from position where
      symbol = #{symbol} and current_qty != 0
    <if test="userId != null">
      and user_id = #{userId}
    </if>
    <if test="positionId != null">
      and id != #{positionId}
    </if>
    <if test='side != null and side == "buy"'>
      and current_qty &gt; 0
    </if>
    <if test='side != null and side == "sell"'>
      and current_qty &lt; 0
    </if>
    <if test="currentQty != null">
      and abs(current_qty) &lt;= #{currentQty}
    </if>
      order by abs(current_qty) desc limit #{pageSize}
  </select>
</mapper>