package cn.iocoder.springboot.lab36.prometheusdemo;

import cn.iocoder.springboot.lab36.prometheusdemo.po.PositionDO;
import cn.iocoder.springboot.lab36.prometheusdemo.service.PositionService;
import io.prometheus.client.Collector;
import io.prometheus.client.Collector.MetricFamilySamples.Sample;
import io.prometheus.client.CollectorRegistry;
import io.prometheus.client.SummaryMetricFamily;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyCollector extends Collector {

    @Autowired
    PositionService positionService;

    private int count;

    DateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");

    public MyCollector(CollectorRegistry registry) {
        super();
        this.register(registry);
    }

    @Override
    public List<MetricFamilySamples> collect() {
        if (positionService == null) {
            return new ArrayList<>();
        }
        double value = Math.random() * 10;
        Sample sample1 = new Sample("test1_cycles_automatic_gc_cycles_total", Arrays.asList("env"), Arrays.asList("dev"), value);
        MetricFamilySamples metricFamilySamples1 = new MetricFamilySamples("test1_cycles_automatic_gc_cycles_total", Type.UNTYPED, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample1));
        Sample sample2 = new Sample("test2", Arrays.asList("env"), Arrays.asList("dev"), value);
        MetricFamilySamples metricFamilySamples2 = new MetricFamilySamples("test2", Type.GAUGE, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample2));
        Sample sample3 = new Sample("test3", Arrays.asList("env"), Arrays.asList("dev"), value);
        MetricFamilySamples metricFamilySamples3 = new MetricFamilySamples("test3", Type.COUNTER, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample3));
        Sample sample4 = new Sample("test4", Arrays.asList("env"), Arrays.asList("dev"), value);
        MetricFamilySamples metricFamilySamples4 = new MetricFamilySamples("test4", Type.HISTOGRAM, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample4));
        List<PositionDO> positionDOS = positionService.getPosition(null, null);
        Map<String, Long> longMap = new HashMap<>();
        long time=System.currentTimeMillis();
        for (PositionDO positionDO : positionDOS) {
            if (positionDO.getCurrentQty() <= 0) {
                continue;
            }
            long old = longMap.getOrDefault(positionDO.getSymbol(), 0L);
            longMap.put(positionDO.getSymbol(), positionDO.getCurrentQty() + old);
        }
        List<Collector.MetricFamilySamples.Sample> samples = new ArrayList<>();
        List<Collector.MetricFamilySamples.Sample> distubute = new ArrayList<>();
        for (Entry<String, Long> stringLongEntry : longMap.entrySet()) {
            Sample sample = new Sample("position_long", Arrays.asList("symbol"), Arrays.asList(stringLongEntry.getKey()), stringLongEntry.getValue(),time-(long)(Math.random()*1000*60*10));
            samples.add(sample);
            Sample d = new Sample("position_dis", Arrays.asList("symbol"), Arrays.asList("btc"), stringLongEntry.getValue(),time-(long)(Math.random()*1000*60*30));
            distubute.add(d);
        }
        MetricFamilySamples longPosition = new MetricFamilySamples("position_long", Type.GAUGE, "Count of completed GC cycles generated by the Go runtime.", samples);
        MetricFamilySamples d = new MetricFamilySamples("position_dis", Type.UNTYPED, "Count of completed GC cycles generated by the Go runtime.", distubute);

        double rand_dis_value=Math.random()*1000;
        long rand_dis_time=time-(long)(Math.random()*1000*60*30);
        Sample random = new Sample("rand_dis", Arrays.asList("symbol"), Arrays.asList("random"), rand_dis_value,rand_dis_time);
        MetricFamilySamples rand = new MetricFamilySamples("rand_dis", Type.GAUGE, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(random));
        System.out.println("test2="+value+";rand_dis="+rand_dis_value+";time="+dateFormat.format(new Date(rand_dis_time)));

        Sample sample_50 = new Sample("test_bucket", Arrays.asList("le"), Arrays.asList("0.5"), 5+(int)value);
        Sample sample_75 = new Sample("test_bucket", Arrays.asList("le"), Arrays.asList("0.75"), 10+(int)value);
        Sample sample_99 = new Sample("test_bucket", Arrays.asList("le"), Arrays.asList("0.99"), 17+(int)value);
        Sample sample_sum = new Sample("test_bucket_sum", Collections.emptyList(), Collections.emptyList(), (int)value+32);
        Sample sample_count = new Sample("test_bucket_count", Collections.emptyList(), Collections.emptyList(), 3);

        MetricFamilySamples bucket = new MetricFamilySamples("test_bucket", Type.HISTOGRAM, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample_50, sample_75, sample_99,sample_sum,sample_count));

        SummaryMetricFamily summaryMetricFamily = new SummaryMetricFamily("test_summary", "Count of completed GC cycles generated by the Go runtime.", Collections.emptyList(), Arrays.asList(0.5, 0.75, 0.99));
        summaryMetricFamily.addMetric(Collections.emptyList(), 10, 30, Arrays.asList(2D, 10D, 28D));
        return Arrays.asList(rand, d, metricFamilySamples1, metricFamilySamples2, metricFamilySamples3, metricFamilySamples4, longPosition, summaryMetricFamily, bucket);
    }
}
