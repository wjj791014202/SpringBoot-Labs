package cn.iocoder.springboot.lab36.prometheusdemo;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.DistributionSummary;
import io.micrometer.core.instrument.LongTaskTimer;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Metrics;
import io.micrometer.core.instrument.Tag;
import io.micrometer.core.instrument.Timer;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/metrics")
public class MetricsController {
    private final Counter counter;

    @Autowired
    MyCollector myCollector;

    public MetricsController(final MeterRegistry registry) {
        this.counter = registry.counter("greeting","symbol","btc","func","greeting");
    }

    @RequestMapping("/counter")
    public String counter(@RequestParam("symbol") String symbol) {
        Counter counter= Metrics.globalRegistry.counter("counter", "symbol", symbol);
        counter.increment(1.1);
        return "hello world #" + this.counter.count();
    }

    @RequestMapping("/gauge")
    public String gauge(@RequestParam("symbol") String symbol) {
        List<Tag> tags= Arrays.asList(Tag.of("symbol",symbol));
        int a= (int) (Math.random()*10);
        Metrics.globalRegistry.gauge("gauge", tags,  a);

        return "hello world #" + a;
    }

    @RequestMapping("/distribution")
    public void distribution(@RequestParam("symbol") String symbol) {
        DistributionSummary summary = DistributionSummary.builder("distribution1")
                .description("simple distribution summary")
                .minimumExpectedValue(1L)
                .maximumExpectedValue(10L)
                .publishPercentiles(0.5, 0.75, 0.9)
                .register(Metrics.globalRegistry);
        double a=Math.random()*10;
        summary.record(a);
//        summary.record(1.3);
//        summary.record(2.4);
//        summary.record(3.5);
//        summary.record(4.1);
        System.out.println(summary.takeSnapshot());
    }

    @RequestMapping("/distribution2")
    public double distribution1(@RequestParam("symbol") String symbol) {
        double a=Math.random()*10;
        Metrics.globalRegistry.summary("distribution2","symbol",symbol).record(a);
        return a;
    }

    @RequestMapping("/record")
    public void record(@RequestParam("symbol") String symbol) {
        Timer timer = Metrics.globalRegistry.timer("simple", "symbol", symbol);
        timer.record(() -> {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
    }

    @RequestMapping("/sample")
    public void sample(@RequestParam("symbol") String symbol) {
        Timer.Sample sample = Timer.start();
        new Thread(() -> {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            sample.stop(Metrics.globalRegistry.timer("sample", "symbol", symbol));
        }).start();
    }
    
    @RequestMapping("/long")
    public void longTask(@RequestParam("symbol") String symbol) {
        LongTaskTimer timer = Metrics.globalRegistry.more().longTaskTimer("long", "symbol", symbol);
        timer.record(() -> {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
    }

    @RequestMapping("/readdb")
//    @ReadOperation(produces = TextFormat.CONTENT_TYPE_004)
    public String readdb() {
        return "ok";
//        try {
//            Writer writer = new StringWriter();
//            Sample sample=new Sample("test1_cycles_automatic_gc_cycles_total",Arrays.asList("env"),Arrays.asList("dev"),9);
//            MetricFamilySamples metricFamilySamples=new MetricFamilySamples("test1_cycles_automatic_gc_cycles_total", Type.UNTYPED, "Count of completed GC cycles generated by the Go runtime.", Arrays.asList(sample));
//            Enumeration<MetricFamilySamples> mfs=new IteratorEnumeration(Arrays.asList(metricFamilySamples).iterator());
//            TextFormat.write004(writer, mfs);
//            return writer.toString();
//        }
//        catch (IOException ex) {
//            // This actually never happens since StringWriter::write() doesn't throw any
//            // IOException
//            throw new RuntimeException("Writing metrics failed", ex);
//        }
    }
}
